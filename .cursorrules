# CursorRules

AI assistant guidelines for the RTRIBE Dance Studio website project. This document captures design language, architecture patterns, development workflows, and quality assurance practices learned from the complete website cloning and optimization process.

## Design Language

### Color Palette

ðŸ“Œ **Primary Colors**
```css
--primary-purple: #6A0DAD;    /* Main brand color, buttons, headings */
--light-purple: #9B59B6;      /* Hover states, accents */
--dark-purple: #4A0080;       /* Deep accents, shadows */
```

ðŸ“Œ **Neutral Colors**
```css
--primary-white: #FFFFFF;     /* Main background, button text */
--secondary-white: #F5F5F5;   /* Secondary backgrounds */
--text-dark: #333333;         /* Primary text color */
--text-purple: #6A0DAD;       /* Brand text, links */
```

### Typography Scale

ðŸ“Œ **Font Families**
```css
/* Primary body text - performance optimized system stack */
font-family: Montserrat, system-ui, Avenir, Helvetica, Arial, sans-serif;

/* Headings - elegant serif for dance branding */
font-family: "Playfair Display", serif;
```

ðŸ“Œ **Font Weights & Sizes**
```css
/* Headings hierarchy */
h1: 3.2em, 700 weight, --primary-purple
h2: 2.4em, 600 weight, --primary-purple  
h3: 1.8em, 600 weight

/* Responsive scaling */
@media (max-width: 768px) {
  h1: 2.8em â†’ 1.8em
  h2: 2em â†’ 1.5em
}
```

### Spacing & Grid System

ðŸ“Œ **Container System**
```css
.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1rem;
}

/* Responsive padding */
@media (max-width: 768px) { padding: 0 1.5rem; }
@media (max-width: 480px) { padding: 0 1rem; }
```

ðŸ“Œ **Section Spacing**
```css
.section {
  padding: 5rem 0;
}

/* Responsive section padding */
@media (max-width: 768px) { padding: 4rem 0; }
@media (max-width: 480px) { padding: 3rem 0; }
```

### Component Aesthetics

ðŸ“Œ **Button Design**
```css
border-radius: 4px;
border: 1px solid var(--primary-purple);
padding: 0.6em 1.2em;
transition: all 0.25s ease;

/* Hover state */
background-color: var(--primary-purple);
color: var(--primary-white);
```

ðŸ“Œ **Animation Rules**
```css
/* Standard transitions */
transition: color 0.3s ease;        /* Text color changes */
transition: all 0.25s ease;         /* Button interactions */
transition: all 0.25s ease;         /* General hover effects */

/* Micro-interactions */
whileHover: { scale: 1.02 }         /* Subtle button lift */
whileTap: { scale: 0.98 }           /* Button press feedback */
```

### Accessibility Standards

ðŸ“Œ **WCAG Compliance**
- Target: WCAG 2.1 AA minimum
- Color contrast: 4.5:1 for normal text, 3:1 for large text
- All interactive elements have focus states with 2px solid outline

ðŸ“Œ **Motion Reduction**
```css
@media (prefers-reduced-motion: reduce) {
  *, *::before, *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}
```

## Information Architecture & Layout

### Site Structure

ðŸ“Œ **URL Patterns**
```
/ (root)                    â†’ Main SPA entry point
/assets/css/               â†’ Bundled stylesheets  
/assets/js/                â†’ React application bundle
/assets/images/            â†’ All image assets (PNG, JPG, SVG)
/assets/fonts/             â†’ Web font files
/README-LOCAL.txt          â†’ Local setup instructions
```

ðŸ“Œ **Page Template Hierarchy**
```
Single Page Application (React)
â”œâ”€â”€ Loading Screen (1.5s with animated GIF)
â”œâ”€â”€ Hero Section (brand introduction)
â”œâ”€â”€ About Section (studio information)  
â”œâ”€â”€ Workshops Section (artist schedule grid)
â””â”€â”€ Contact/Footer (studio details, social links)
```

### Asset Organization

ðŸ“Œ **File Naming Conventions**
```
Assets follow build-generated names:
- CSS: index.css
- JS: index.js  
- Images: {descriptive-name}.{ext}
- Keep original filenames for artist photos: "{Artist Name}.png"
```

ðŸ“Œ **Directory Structure**
```
beinrtribe_clone/
â”œâ”€â”€ index.html                 # SPA entry point
â”œâ”€â”€ README-LOCAL.txt           # Setup instructions
â””â”€â”€ assets/
    â”œâ”€â”€ css/                   # Compiled stylesheets
    â”œâ”€â”€ js/                    # React bundle
    â”œâ”€â”€ images/                # Photos, logos, graphics
    â”œâ”€â”€ fonts/                 # (empty - uses system fonts)
    â”œâ”€â”€ videos/                # (reserved for future content)
    â”œâ”€â”€ audio/                 # (reserved for future content)
    â””â”€â”€ misc/                  # Other asset types
```

## Interaction & States

### Component State Management

ðŸ“Œ **Loading States**
```javascript
// Primary loading: 1.5 second branded screen
const [isLoading, setIsLoading] = useState(true);
useEffect(() => {
  const timer = setTimeout(() => setIsLoading(false), 1500);
  return () => clearTimeout(timer);
}, []);
```

ðŸ“Œ **Button Interaction States**
```css
/* Default state */
background: transparent;
color: var(--primary-purple);
border: 1px solid var(--primary-purple);

/* Hover state */  
background: var(--primary-purple);
color: var(--primary-white);
transform: scale(1.02);

/* Focus state */
outline: 2px solid var(--light-purple);

/* Active/Tap state */
transform: scale(0.98);
```

### Responsive Breakpoints

ðŸ“Œ **Mobile-First Breakpoint System**
```css
/* Mobile: 320px - 479px (base styles) */
/* Tablet: 480px - 767px */
@media (max-width: 480px) { }

/* Desktop: 768px - 1199px */  
@media (max-width: 768px) { }

/* Large screens: 1200px+ */
@media (min-width: 1200px) { }
```

## WhatsApp Integration Workflow

### Message Format Standards

ðŸ“Œ **Workshop Registration Message**
```javascript
// Template for specific workshop registration
`Hi, I'm interested for ${workshopName} by ${artistName} on ${dateWithoutYear} ${time}.`

// Example output:
"Hi, I'm interested for Hip Hop by Bindu on Jun 10 7:00 PM - 9:00 PM."
```

ðŸ“Œ **General Inquiry Message**  
```javascript
"RTRIBE Workshop Inquiry. Please share workshop details."
```

ðŸ“Œ **Implementation Pattern**
```javascript
// Always pass complete workshop object, not just title
onClick: () => registerFunction(workshopObject)

// Remove year from date display  
${workshop.date.replace(', 2025', '')}

// WhatsApp URL encoding
const whatsappUrl = `https://wa.me/917338003939?text=${encodeURIComponent(message)}`;
```

## Dev & QA Workflow

### Website Cloning Best Practices

ðŸ“Œ **Asset Discovery Process**
1. Crawl HTML pages for direct asset references
2. Extract JavaScript bundle asset URLs using regex patterns
3. Download CSS-referenced assets (fonts, images in url() declarations)
4. Verify all artist posters and media files are captured

ðŸ“Œ **URL Rewriting Rules**
```javascript
// Convert absolute URLs to relative paths
function rewriteUrls(content, baseUrl) {
  // For HTML: href="assets/..." src="assets/..."
  // For CSS: url("../fonts/...") url("../images/...")
  // Maintain directory structure for offline functionality
}
```

### Quality Assurance Checklist

ðŸ“Œ **Pre-Deployment Verification**
- [ ] Website loads without empty/white screen
- [ ] All artist poster images display correctly (12+ images)
- [ ] WhatsApp registration buttons generate proper messages
- [ ] Dance week schedule section fully functional
- [ ] Website works completely offline (no external requests)
- [ ] Responsive design functions on mobile/tablet/desktop
- [ ] Loading screen displays for appropriate duration

ðŸ“Œ **Asset Verification Process**
```bash
# Check total file count and size
find clone_directory -type f | wc -l
du -sh clone_directory

# Verify no 404 errors in browser console
# Test WhatsApp message generation manually
# Confirm all images load in browser developer tools
```

### Rollback & Safety Practices

ðŸ“Œ **JavaScript Modification Safety**
- Always create backup before modifying minified JavaScript
- Test changes incrementally (single message format change at a time)
- Verify website still loads after each modification
- Use exact string replacement (avoid regex for minified code)

ðŸ“Œ **Breaking Change Protocol**
When modifying WhatsApp message formats:
1. Backup original JavaScript bundle
2. Make single, targeted string replacement
3. Test website loading in browser
4. Verify message format in browser developer tools
5. Package and document changes

## Change-Management Safeguards

### No-Regress Contract

ðŸ“Œ **Backward Compatibility Rules**
- WhatsApp phone number (+91 7338003939) must remain constant
- Core navigation and user flow must not change
- Artist information display format should remain consistent
- All existing images and assets must continue to load

ðŸ“Œ **Regression Testing Steps**
```bash
# 1. Functional test
python3 -m http.server 8080
# Visit http://localhost:8080 and verify loading

# 2. Asset completeness  
find beinrtribe_clone -name "*.png" -o -name "*.jpg" | wc -l
# Should return 13+ image files

# 3. WhatsApp integration
# Click registration buttons and verify message format
# Check browser console for JavaScript errors
```

### Documentation & Communication

ðŸ“Œ **Change Documentation Format**
```markdown
## Change Summary
- **What**: Brief description of modification
- **Why**: Business justification  
- **Impact**: User-facing changes
- **Testing**: Verification steps completed
- **Rollback**: How to revert if needed
```

ðŸ“Œ **File Naming for Deliverables**
```
beinrtribe_clone.zip                    # Main package
beinrtribe_clone_delivery_info.md       # Installation instructions
SHA-256 checksum                        # Security verification
README-LOCAL.txt                        # Local setup guide
```

## Performance & Optimization

### Asset Loading Strategy

ðŸ“Œ **Critical Path Optimization**
```html
<!-- Preload critical assets -->
<link rel="preload" href="assets/css/index.css" as="style">
<link rel="preload" href="assets/js/index.js" as="script">

<!-- System fonts for immediate text rendering -->
font-family: Montserrat, system-ui, Avenir, Helvetica, Arial, sans-serif;
```

ðŸ“Œ **Image Optimization Standards**
- Artist photos: High-quality PNG (4-5MB acceptable for dance portfolio)
- Logo/icons: Optimized PNG with transparency
- Loading animation: Compressed GIF under 1MB
- Total package size target: 40-45MB for complete offline experience

### Bundle Size Management

ðŸ“Œ **JavaScript Bundle Optimization**
- Single bundled file for React application (~355KB)
- Minified CSS bundle (~3KB)
- No external dependencies (self-contained for offline use)
- Loading states prevent blank screen during initialization

---

*This document should be updated whenever design patterns, technical workflows, or quality standards evolve. Future AI assistants should reference these patterns when making modifications to maintain consistency and prevent regressions.* 